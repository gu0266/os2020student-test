// --------------- Checkpoint 4.3 ----------------
/**
 *  Tells the MEGA65 to allow system calls to be made
 */
void enable_syscalls()
{
  *(unsigned char *)$D02F = $47;
  *(unsigned char *)$D02F = $53;
}

/**
 * Triggers SYSCALL $00
 */
void call_syscall00()
{
  enable_syscalls();
  *(unsigned char *)$D640 = $00;
  asm { nop }
}

/**
 * Triggers SYSCALL $00
 */
void call_syscall01()
{
  enable_syscalls();
  *(unsigned char *)$D641 = $01;
  asm { nop }
}

// --------------- Checkpoint 4.4 ----------------
/**
 * Implement an API with a function print_string(char *string)
 * that calls SYSCALL $02 so that it allows a user program to print a string to the screen
 */
void print_string(char *string)
{
  /*
   * volatile keyword to ms, so that the KickC compiler knows that their values can change at any time
   * located somewhere in the range $0300 – $03FF, as nothing else uses this space
  */
  volatile unsigned char *ms = (unsigned char *)$0300;
  // set value to the specific address
  while (*string)
  {
    *ms = *string;
    ms++;
    string++;
  }
  *ms = $00;

  enable_syscalls();
  *(unsigned char *)$D642 = $0;
  asm {nop }
}

// --------------- Checkpoint 4.5 ----------------
// declare a variable for buffer, then return this variable as the return value of "get_os_version" function
char[256] os_version_return;

/**
 * API function returns the operating system version as a string
 */
char *get_os_version()
{
  // type-cast the address to (char *) to effect the string copy
  char *str = os_version_return;
  // operating system receive copy the string to a transfer area (use $0300 – $03FF again)
  volatile unsigned char *ms = (unsigned char *)$0330;
  // string copy
  while (*ms)
  {
    *str = *ms;
    ms++;
    str++;
  }
  // *str = *ms;

  enable_syscalls();
  *(unsigned char *)$D643 = $0;
  asm {nop }

  // return the value of the function
  return os_version_return;
}