// XMega65 Kernal Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP
import "string"

// Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")

    // Some definitions of addresses and special values that this program uses
    const char * RASTER = 0xd012;
const char *VIC_MEMORY = 0xd018;
const char *SCREEN = 0x0400;
const char *BGCOL = 0xd021;
const char *COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

// Some text to display
char[] MESSAGE = "a man stands in the middle of the screen";

void main()
{
    // Initialize screen memory, and select correct font
    *VIC_MEMORY = 0x14;
    // Fill the screen with spaces
    memset(SCREEN, ' ', 40 * 25);
    // Set the colour of every character on the screen to white
    memset(COLS, WHITE, 40 * 25);

    // Display it one line down on the screen
    char *sc = SCREEN + 40;
    // The message to display
    char *msg = MESSAGE;
    char *sc2 = SCREEN;

    // Initialize coordinate for symbols
    int x = 20, y = 13;
    // Define the colors for displaying
    char[] colors = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    // Initialize the random color
    char r_color = colors[1] - 1;

    // A simple copy routine to copy the string
    while (*msg)
    {
        // Display the content of the message verbatim
        *sc++ = *msg++;
        my_sleep(100000);
    }

    while (true)
    {
        for (int k = 1; k < sizeof(colors); k++)
        {

            r_color++;

            // Clear and initialize the message to display
            sc = SCREEN + 40;
            msg = MESSAGE;
            // **************************** Line 1 ******************************
            while (*msg)
            {
                *sc++ = *msg++;
                // Set the colour of every character on the screen
                memset(COLS, r_color, 40 * 2);
            }

            // **************************** Line 11 ******************************
            // Draw the first underline with random color on the (17, 11) latitude
            *(SCREEN + ((y - 2) * 40 + x - 3)) = $64;
            *(COLS + ((y - 2) * 40 + x - 3)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;

                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // Draw the head with random color on the (18, 11) latitude
            *(SCREEN + ((y - 2) * 40 + x - 2)) = $51;
            *(COLS + ((y - 2) * 40 + x - 2)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;

                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // Draw the second underline with random color on the (19, 11) latitude
            *(SCREEN + ((y - 2) * 40 + x - 1)) = $64;
            *(COLS + ((y - 2) * 40 + x - 1)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;

                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // **************************** Line 12 ******************************
            // Draw the left arm with random color on the (17, 12) latitude
            *(SCREEN + ((y - 1) * 40 + x - 3)) = $54;
            *(COLS + ((y - 1) * 40 + x - 3)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;
                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // Draw a body(heart) with random color in the middle of the screen
            *(SCREEN + ((y - 1) * 40 + x - 2)) = $53;
            *(COLS + ((y - 1) * 40 + x - 2)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;
                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // Draw the right arm with random color on the (19, 12) latitude
            *(SCREEN + ((y - 1) * 40 + x - 1)) = $59;
            *(COLS + ((y - 1) * 40 + x - 1)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;
                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // **************************** Line 13 ******************************
            // Draw a body(legs) with random color in the middle of the screen
            *(SCREEN + ((y)*40 + x - 2)) = $42;
            *(COLS + ((y)*40 + x - 2)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;
                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // **************************** Line 14 ******************************
            // Draw the left foot with random color on the (17, 14) latitude
            *(SCREEN + ((y + 1) * 40 + x - 3)) = $64;
            *(COLS + ((y + 1) * 40 + x - 3)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;

                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }

            // Draw the right foot with random color on the (19, 14) latitude
            *(SCREEN + ((y + 1) * 40 + x - 1)) = $64;
            *(COLS + ((y + 1) * 40 + x - 1)) = r_color;
            for (int j = 0; j < 500; j++)
            {
                sc2 = SCREEN;

                for (int i = 0; i < 25; i++)
                {
                    sc2 = sc2 + 40;
                }
            }
        }
    }
}

/**
 *  Custom timing function
 */
void my_sleep(unsigned long time)
{
    for (unsigned long i = 0; i < time; i++)
    {
    }
}

// Here are a couple sample SYSCALL handlers that just display a character on the screen
void syscall1()
{
    exit_hypervisor();
}

// Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

// The structure of each entry point is JMP <handler address> + NOP.Syscall
// We have a char (xjmp) to hold the opcode for the JMP instruction,
// and then put the address of the SYSCALL/trap handler in the next
// two points as a pointer, and end with the NOP instruction opcode.
struct SysCall
{
    char xjmp;        // Holds $4C, the JMP $nnnn opcode
    void() * syscall; // Holds handler address, will be the target of the JMP
    char xnop;        // Holds $EA, the NOP opcode
};

// To save writing 0x4C and 0xEA all the time, we define them as constants
const char JMP = 0x4c;
const char NOP = 0xea;

// Now we can have a nice table of up to 64 SYSCALL handlers expressed
// in a fairly readable and easy format.
// Each line is an instance of the struct SysCall from above, with the JMP
// opcode value, the address of the handler routine and the NOP opcode value.
export struct SysCall[] SYSCALLS = {
    {JMP, &syscall1, NOP}};
// In this example we had only two SYSCALLs defined, so rather than having
// another 62 lines, we can just ask KickC to make the TRAP table begin
// at the next multiple of $100, i.e., at $8100.
export align(0x100) struct SysCall[] SYSCALL_RESET = {
    {JMP, &main, NOP}};

void exit_hypervisor()
{
    // Trigger exit from Hypervisor mode
    *(unsigned char *)$D67F = $01;
}